{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red108\green121\blue134;\red31\green31\blue36;\red108\green121\blue134;
\red255\green255\blue255;\red252\green95\blue163;\red208\green168\blue255;\red161\green103\blue230;\red161\green103\blue230;
\red208\green191\blue105;\red252\green106\blue93;\red103\green183\blue164;\red103\green183\blue164;}
{\*\expandedcolortbl;;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c42394\c47462\c52518\c60000;
\csgenericrgb\c100000\c100000\c100000\c85000;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c63232\c40219\c90115;\csgenericrgb\c63137\c40392\c90196;
\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c40538\c71705\c64209;\csgenericrgb\c40392\c71765\c64314;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 //: 
\f1 \cf4 [
\f0 \cf2 Previous
\f1 \cf4 ](@previous)\cf5 \
\
\cf2 //use swift/any language\cf5 \
\cf2 //\cf5 \
\cf2 //Reverse array program\cf5 \
\cf2 //Prime number finder from the given array\cf5 \
\cf2 //Even odd finder from given array\cf5 \
\cf2 //Find factorial of a given number\cf5 \
\cf2 //\cf5 \
\cf2 //\cf5 \
\cf2 //Given an array [1,2,3,4,5,6] and groupSize = 2, produce array: [[1,2], [3,4], [5,6]]\cf5 \
\cf2 //Test case 2 = [1,2,3,4,5,6, 7] and groupSize = 2, produce  array: [[1,2], [3,4], [5,6]]\cf5 \
// hi\
\

\f2\b \cf6 import
\f1\b0 \cf5  Foundation\
\

\f2\b \cf6 func
\f1\b0 \cf5  reverseArray (a: \cf7 Array\cf5 <
\f2\b \cf6 Any
\f1\b0 \cf5 >) -> \cf7 Array\cf5 <
\f2\b \cf6 Any
\f1\b0 \cf5 > \{\
    
\f2\b \cf6 var
\f1\b0 \cf5  reversedArray = \cf7 Array\cf5 <
\f2\b \cf6 Any
\f1\b0 \cf5 >()\
    \
    
\f2\b \cf6 if
\f1\b0 \cf5  a.\cf8 isEmpty\cf5  \{\
        
\f2\b \cf6 return
\f1\b0 \cf5  a\
    \}\
    reversedArray = a.\cf9 reversed\cf5 ()\
    
\f2\b \cf6 return
\f1\b0 \cf5  reversedArray\
\}\
\
\

\f2\b \cf6 func
\f1\b0 \cf5  isPrime (num: \cf7 Int\cf5 ) -> \cf7 String\cf5  \{\
    
\f2\b \cf6 var
\f1\b0 \cf5  count = \cf10 2\cf5 \
    
\f2\b \cf6 while
\f1\b0 \cf5  count \cf9 <\cf5  num \{\
        
\f2\b \cf6 if
\f1\b0 \cf5  num \cf9 %\cf5  count \cf9 ==\cf5  \cf10 0\cf5  \{\
            
\f2\b \cf6 return
\f1\b0 \cf5  \cf11 "Not Prime"\cf5 \
        \}\
        count \cf9 +=\cf5  \cf10 1\cf5 \
    \}\
    
\f2\b \cf6 return
\f1\b0 \cf5  \cf11 "Prime"\cf5 \
\}\
\
\

\f2\b \cf6 func
\f1\b0 \cf5  evenOddFinder(a: \cf7 Array\cf5 <\cf7 Int\cf5 >) \{\
    
\f2\b \cf6 var
\f1\b0 \cf5  even = \cf7 Array\cf5 <\cf7 Int\cf5 >()\
    
\f2\b \cf6 var
\f1\b0 \cf5  odd = \cf7 Array\cf5 <\cf7 Int\cf5 >()\
    \
    
\f2\b \cf6 for
\f1\b0 \cf5  item 
\f2\b \cf6 in
\f1\b0 \cf5  a \{\
        
\f2\b \cf6 if
\f1\b0 \cf5  item \cf9 %\cf5  \cf10 2\cf5  \cf9 ==\cf5  \cf10 0\cf5  \{\
            even.\cf9 append\cf5 (item)\
        \} 
\f2\b \cf6 else
\f1\b0 \cf5  \{\
            odd.\cf9 append\cf5 (item)\
        \}\
    \}\
    \cf9 print\cf5 (\cf11 "Even Elements: "\cf5 )\
    
\f2\b \cf6 for
\f1\b0 \cf5  item 
\f2\b \cf6 in
\f1\b0 \cf5  even \{\
        \cf9 print\cf5 (item)\
    \}\
    \
    \cf9 print\cf5 (\cf11 "Odd Elements: "\cf5 )\
    
\f2\b \cf6 for
\f1\b0 \cf5  item 
\f2\b \cf6 in
\f1\b0 \cf5  odd \{\
        \cf9 print\cf5 (item)\
    \}\
\}\
\

\f2\b \cf6 func
\f1\b0 \cf5  findFactorial(num: \cf7 Int\cf5 ) -> \cf7 Int\cf5  \{\
    
\f2\b \cf6 var
\f1\b0 \cf5  f = \cf10 1\cf5 \
    \
    
\f2\b \cf6 if
\f1\b0 \cf5 (num \cf9 ==\cf5  \cf10 0\cf5  \cf9 ||\cf5  num \cf9 ==\cf5  \cf10 1\cf5 ) \{\
        
\f2\b \cf6 return
\f1\b0 \cf5  num\
    \}\
    \
    
\f2\b \cf6 for
\f1\b0 \cf5  n 
\f2\b \cf6 in
\f1\b0 \cf5  \cf9 stride\cf5 (from: num, to: \cf10 1\cf5 , by: \cf10 -1\cf5 ) \{\
        f \cf9 *=\cf5  n\
    \}\
    
\f2\b \cf6 return
\f1\b0 \cf5  f\
\}\
\
\
\

\f2\b \cf6 func
\f1\b0 \cf5  arrayGrouping(arr: \cf7 Array\cf5 <
\f2\b \cf6 Any
\f1\b0 \cf5 >, groupSize: \cf7 Int\cf5 ) -> \cf7 Array\cf5 <
\f2\b \cf6 Any
\f1\b0 \cf5 > \{\
    
\f2\b \cf6 var
\f1\b0 \cf5  iterator = \cf10 0\cf5 \
    
\f2\b \cf6 var
\f1\b0 \cf5  tempArray = \cf7 Array\cf5 <
\f2\b \cf6 Any
\f1\b0 \cf5 >()\
    
\f2\b \cf6 var
\f1\b0 \cf5  slice = \cf7 ArraySlice\cf5 <
\f2\b \cf6 Any
\f1\b0 \cf5 >()\
    
\f2\b \cf6 var
\f1\b0 \cf5  chunk = \cf7 Array\cf5 <
\f2\b \cf6 Any
\f1\b0 \cf5 >()\
    \
    \
    
\f2\b \cf6 while
\f1\b0 \cf5  (iterator \cf9 +\cf5  groupSize\cf9 -\cf10 1\cf5 ) \cf9 <\cf5  arr.\cf8 count\cf5  \{\
        slice = arr[iterator\cf9 ...\cf5 (iterator\cf9 +\cf5 groupSize\cf9 -\cf10 1\cf5 )]\
        chunk = \cf7 Array\cf5 (slice)\
        tempArray.\cf9 append\cf5 (chunk)\
        iterator \cf9 +=\cf5  groupSize\
    \}\
    
\f2\b \cf6 return
\f1\b0 \cf5  tempArray\
\}\
\
\
\
\
\cf2 //TEST CASES\cf5 \

\f2\b \cf6 var
\f1\b0 \cf5  arr:[
\f2\b \cf6 Any
\f1\b0 \cf5 ] = [\cf11 "b"\cf5 , \cf10 0\cf5 , \cf10 0\cf5 , \cf11 "y"\cf5 , \cf11 "a"\cf5 , \cf11 "h"\cf5 ]\
\cf12 arr\cf5  = \cf13 reverseArray\cf5 (a: \cf12 arr\cf5 )\
\cf9 print\cf5 (\cf11 "Array Reverse Function Output: "\cf5 )\
\

\f2\b \cf6 for
\f1\b0 \cf5  item 
\f2\b \cf6 in
\f1\b0 \cf5  \cf12 arr\cf5  \{\
    \cf9 print\cf5 (item)\
\}\
\
\cf9 print\cf5 (\cf11 ""\cf5 )\
\
\
\
\cf9 print\cf5 (\cf11 "Prime Number Finder Output: "\cf5 )\
\

\f2\b \cf6 let
\f1\b0 \cf5  twentyFive = \cf10 25\cf5 \

\f2\b \cf6 let
\f1\b0 \cf5  sixtyOne = \cf10 61\cf5 \

\f2\b \cf6 let
\f1\b0 \cf5  sixtyThree = \cf10 63\cf5 \
\
\cf9 print\cf5 (\cf11 "25 is "\cf5  \cf9 +\cf5  \cf13 isPrime\cf5 (num: \cf12 twentyFive\cf5 ))\
\cf9 print\cf5 (\cf11 "61 is "\cf5  \cf9 +\cf5  \cf13 isPrime\cf5 (num: \cf12 sixtyOne\cf5 ))\
\cf9 print\cf5 (\cf11 "63 is "\cf5  \cf9 +\cf5  \cf13 isPrime\cf5 (num: \cf12 sixtyThree\cf5 ))\
\
\cf9 print\cf5 (\cf11 ""\cf5 )\
\
\
\

\f2\b \cf6 let
\f1\b0 \cf5  arrNums = [\cf10 1\cf5 ,\cf10 2\cf5 ,\cf10 3\cf5 ,\cf10 4\cf5 ,\cf10 5\cf5 ,\cf10 6\cf5 ,\cf10 7\cf5 ,\cf10 8\cf5 ,\cf10 9\cf5 ,\cf10 10\cf5 ]\
\cf9 print\cf5 (\cf11 "Even/Odd Finder Function Output: "\cf5 )\
\cf13 evenOddFinder\cf5 (a: \cf12 arrNums\cf5 )\
\

\f2\b \cf6 let
\f1\b0 \cf5  seven = \cf13 findFactorial\cf5 (num: \cf10 7\cf5 )\

\f2\b \cf6 let
\f1\b0 \cf5  zero = \cf13 findFactorial\cf5 (num: \cf10 0\cf5 )\

\f2\b \cf6 let
\f1\b0 \cf5  ten = \cf13 findFactorial\cf5 (num: \cf10 10\cf5 )\

\f2\b \cf6 let
\f1\b0 \cf5  one = \cf13 findFactorial\cf5 (num: \cf10 1\cf5 )\
\cf9 print\cf5 (\cf11 "Factorial Function Output: "\cf5 )\
\cf9 print\cf5 (\cf11 "The Factorial of 0 is: \cf5 \\(\cf12 zero\cf5 )\cf11 "\cf5 )\
\cf9 print\cf5 (\cf11 "The Factorial of 1 is: \cf5 \\(\cf12 one\cf5 )\cf11 "\cf5 )\
\cf9 print\cf5 (\cf11 "The Factorial of 7 is: \cf5 \\(\cf12 seven\cf5 )\cf11 "\cf5 )\
\cf9 print\cf5 (\cf11 "The Factorial of 10 is: \cf5 \\(\cf12 ten\cf5 )\cf11 "\cf5 )\
\
\cf9 print\cf5 (\cf11 ""\cf5 )\
\
\
\cf9 print\cf5 (\cf11 "Array Grouping Function Output: "\cf5 )\

\f2\b \cf6 var
\f1\b0 \cf5  groupArr:[
\f2\b \cf6 Any
\f1\b0 \cf5 ] = [\cf10 1\cf5 ,\cf10 2\cf5 ,\cf10 3\cf5 ,\cf10 4\cf5 ,\cf10 5\cf5 ,\cf10 6\cf5 ]\

\f2\b \cf6 var
\f1\b0 \cf5  groupArr2:[
\f2\b \cf6 Any
\f1\b0 \cf5 ] = [\cf10 1\cf5 ,\cf10 2\cf5 ,\cf10 3\cf5 ,\cf10 4\cf5 ,\cf10 5\cf5 ,\cf10 6\cf5 ,\cf10 7\cf5 ]\
\
\cf9 print\cf5 (\cf11 "Group 1:"\cf5 )\
\
\
\cf9 print\cf5 (\cf11 "\cf5 \\(\cf13 arrayGrouping\cf5 (arr: \cf12 groupArr\cf5 , groupSize: \cf10 2\cf5 ))\cf11 "\cf5 )\
\
\cf9 print\cf5 (\cf11 "Group 2:"\cf5 )\
\
\cf9 print\cf5 (\cf11 "\cf5 \\(\cf13 arrayGrouping\cf5 (arr: \cf12 groupArr2\cf5 , groupSize: \cf10 2\cf5 ))\cf11 "\cf5 )\
\

\f0 \cf2 //: 
\f1 \cf4 [
\f0 \cf2 Next
\f1 \cf4 ](@next)\cf5 \
}